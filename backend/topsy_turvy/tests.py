from django.test import TestCase
import unittest
import game_logic

class TestGameLogic(unittest.TestCase):
    def test_horizontal(self):
        board = [["X", "X", "X", "X", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_horizontal_win(board))
        board = [["X", "X", "X", "___", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_horizontal_win(board))
        board = [["X", "X", "X", "O", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_horizontal_win(board))
        board = [["X", "X", "X", "O", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "O", "O", "O", "O", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_horizontal_win(board))
        board = [["X",   "X", "X", "O", "X", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "O", "O", "O", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_horizontal_win(board))

    def test_vertical(self):
        board = [["X", "X", "X", "X", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_vertical_win(board))
        board = [["X", "X", "X", "___", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_vertical_win(board))
        board = [["X", "X", "X", "O", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_vertical_win(board))
        board = [["X", "X", "X", "O", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "O", "O", "O", "O", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_vertical_win(board))
        board = [["X",   "X", "X", "O", "X", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "O", "O", "O", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_vertical_win(board))
        board = [["X",   "X", "X", "O", "X", "___", "___"],
                 ["___", "X", "___", "___", "___", "O", "___"],
                 ["___", "X", "___", "___", "___", "O", "___"],
                 ["X", "O", "___", "___", "___", "O", "___"],
                 ["___", "___", "___", "___", "___", "O", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_vertical_win(board))

    def test_left_diagonal(self):
        board = [["X", "___", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_left_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "___", "___", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_left_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "___", "___", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_left_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "X", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_left_diagonal_win(board))

    def test_right_diagonal(self):
        board = [["X", "___", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_right_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "___", "___", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_right_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "___", "___", "X", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_right_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "X", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertTrue(game_logic.check_for_right_diagonal_win(board))
        board = [["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "X", "___", "___", "___"],
                 ["___", "___", "X", "___", "___", "___", "___"],
                 ["___", "X", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"],
                 ["___", "___", "___", "___", "___", "___", "___"]]
        self.assertFalse(game_logic.check_for_right_diagonal_win(board))

if __name__ == "__main__":
    unittest.main()

